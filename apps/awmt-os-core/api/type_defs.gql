directive @defer(if: Boolean, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @stream(if: Boolean, label: String, initialCount: Int = 0) on FIELD

type Breadcrumb {
	key: String
	path: String
	key_path: String
	label: String
}

type Model {
	path: String
	label: String
	description: String
	#summary: String

	breadcrumbs: [Model]

	is_root: Boolean
	root: Model

	precursor: Model
	head: String
	tail: String

	at(submodel: String): Model
	at_many(submodels: [String]): [Model]

	submodels: [Model]
	find_submodels(class: String, max_depth: Int, follow_references: Boolean): [Model]

	search_submodels(query: String): [ModelSearchResult]

	reference: Model
	reverse_references: [Model]

	in_sets: [Model]

	it2_subclasses: [Model]
	it2_superclasses: [Model]
	it2_instances(depth: Int): [Model]
	it2_prototypes: [Model]
	it2_has_prototype(name: String!): Boolean # TOD
	it2_has_direct_prototype(name: String!): Boolean
	it2_direct_subclasses: [Model]
	it2_direct_superclasses: [Model]
	# it2_direct_instances(page: Int, page_size: Int): [Model]

	it2_direct_instances(where: [InstanceWhereInput], sort: InstanceSortInput): InstancesGroup
	it2_direct_prototypes: [Model]
	it2_count_instances: Int
	it2_count_direct_instances: Int

	classes: [Model]
	direct_classes: [Model]
	has_class(name: String!): Boolean
	has_direct_class(class: String!): Boolean

	if_has_class(name: String!): Model

	instances(page: Int, page_size: Int): [Model]
	direct_instances(page: Int, page_size: Int): [Model]
	root_instances: [Model]

	count_instances: Int
	count_direct_instances: Int

	feature_prototypes(category: String): [Feature]
	find_feature_prototypes(type: String): [Feature]
	search_feature_prototypes(query: String): [FeatureSearchResult]

	has_feature_category(category: String!): Boolean
	has_feature(feature: String!): Boolean
	features(category: String): [Feature]
	find_features(type: String): [Feature]

	feature_targets(category: String): [Model]

	string_value(path: String): String
	number_value(path: String): Float
	boolean_value(path: String): Boolean
	string_array_value(path: String): [String]
	number_array_value(path: String): [Float]
	boolean_array_value(path: String): [Boolean]

	submodel_templates: [Model]

	as: Interface

	interfaces: [String]
	interface_constraints: [String]

	prototype_constraints: [Model]
	superclass_constraints: [Model]

	suggest_references: [Model]
}

type InstancesGroup {
	aggregate: Aggregate
	list(page: Int, page_size: Int): [Model]
}

input InstanceWhereInput {
	at: String
	is: ValueInput
	greater_than: Float
	lower_than: Float
	is_not: ValueInput
	contains_substring: String
}

input InstanceSortInput {
	by: String
	direction: String
}

input ValueInput {
	number: Int
	string: String
	boolean: Boolean
	null: Boolean
}

type Aggregate {
	count: Int
	average(at: String): Float
	sum(at: String): Float
	min(at: String): Float
	max(at: String): Float
}

type Feature {
	category: String
	model: Model
}

type ModelSearchResult {
	model: Model
	score: Float
}

type FeatureSearchResult {
	feature: Feature
	score: Float
}

type Query {
	model(path: String): Model
	models(paths: [String]): [Model]

	search_models(query: String): [ModelSearchResult]

	statistics: Statistics
}

input ModelFilter {
	path: String
}

input CreateModelInput {
	label: String
	path: String
}

type ModelMutation {
	model: Model

	at(submodel: String): ModelMutation

	set_label(label: String): ModelMutation
	set_description(description: String): ModelMutation
	create_submodel(subpath: String, label: String): ModelMutation

	set_class(class: String): ModelMutation
	set_classes(class: [String]): ModelMutation

	it2_instantiate: ModelMutation
	it2_extend: ModelMutation
	it2_add_superclass(superclass: String): ModelMutation
	it2_add_prototype(prototype: String): ModelMutation
	remove_model: Boolean

	create_submodel_template(template: String): ModelMutation
	create_submodel_template_from_prototype(submodel: String): ModelMutation

	# use_submodel_template(template: String!, subpath: String, label: String, as_reference: Boolean, as_constraint: Boolean, array: Boolean): ModelMutation

	create_submodel_from_prototype(prototype: String!, subpath: String, label: String, as_reference: Boolean, instantiate: Boolean, array: Boolean): ModelMutation

	set_reference(reference: String): ModelMutation
	remove_reference: ModelMutation

	set_string_value(value: String): ModelMutation
	set_number_value(value: Float): ModelMutation
	set_boolean_value(value: Boolean): ModelMutation
	set_string_array_value(value: [String]): ModelMutation
	set_number_array_value(value: [Float]): ModelMutation
	set_boolean_array_value(value: [Boolean]): ModelMutation

	remove_value: ModelMutation

	use_feature(feature: String!): ModelMutation
	use_existing_feature(feature: String!, kind: String!): ModelMutation
	# extend_feature_prototype(feature: String!, category: String): ModelMutation

	as: MutationInterface

	add_interface_constraint(interface: String!): ModelMutation
	remove_interface_constraint(interface: String!): ModelMutation

	add_prototype_constraint(prototype: String!): ModelMutation
	remove_prototype_constraint(prototype: String!): ModelMutation

	add_superclass_constraint(superclass: String!): ModelMutation
	remove_superclass_constraint(superclass: String!): ModelMutation
}

type Mutation {
	create_model(input: CreateModelInput): ModelMutation
	at(path: String): ModelMutation

	login(username: String!, password: String!): String

	_delete_everything: Boolean
}

type Statistics {
	# broker_cpu_percentage: Float
	# broker_memory_percentage: Float

	# database_cpu_percentage: Float
	# database_memory_percentage: Float

	# cold_storage_used: Float
	# models_count: Int
	# nodes_count: Int

	# broker_uptime: Int

	# query_percentile_50: Float
	# query_percentile_99: Float
	# query_percentile_999: Float

	db_cpu_credit_balance: Float
}

type Test {
	foo: String
}

type Interface {
	ok: Boolean
}

type MutationInterface {
	ok: Boolean
}
