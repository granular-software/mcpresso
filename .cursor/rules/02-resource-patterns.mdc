# Resource Design Patterns

## Basic CRUD Resource
```typescript
const noteResource = createResource({
  name: "note",
  schema: NoteSchema,
  uri_template: "notes/{id}",
  methods: {
    create: { handler: async (data, user) => createNote(data, user) },
    list: { handler: async (_, user) => listNotes(user) },
    get: { handler: async ({ id }, user) => getNote(id, user) },
    update: { handler: async ({ id, ...data }, user) => updateNote(id, data, user) },
    delete: { handler: async ({ id }, user) => deleteNote(id, user) },
  },
});
```

## Search Resource
```typescript
search: {
  description: "Search notes by title or content",
  inputSchema: z.object({
    query: z.string().describe("Search term"),
    category: z.string().optional(),
    limit: z.number().optional().default(20),
  }),
  handler: async ({ query, category, limit }, user) => {
    return searchNotes({ query, category, limit, userId: user?.id });
  },
}
```

## Bulk Operations
```typescript
bulk_update: {
  description: "Update multiple notes at once",
  inputSchema: z.object({
    ids: z.array(z.string()).describe("Note IDs to update"),
    updates: z.object({
      published: z.boolean().optional(),
      category: z.string().optional(),
    }),
  }),
  handler: async ({ ids, updates }, user) => {
    return bulkUpdateNotes(ids, updates, user.id);
  },
}
```

## Relationships
```typescript
const noteResource = createResource({
  name: "note",
  schema: NoteSchema,
  relations: {
    authorId: { type: "user" },      // Note belongs to one user
    tagIds: { type: "tag" },         // Note can have multiple tags
  },
  methods: { /* ... */ },
});
```

## Handler Patterns
```typescript
// Public endpoint
handler: async (data) => {
  return await processData(data);
}

// Authenticated endpoint
handler: async (data, user) => {
  if (!user) throw new Error("Authentication required");
  return await processDataForUser(data, user);
}

// User-scoped endpoint
handler: async (data, user) => {
  if (!user) throw new Error("Authentication required");
  return await getUserData(user.id);
}
```
description:
globs:
alwaysApply: false
---
