# mcpresso Core Concepts

mcpresso is a TypeScript framework for building MCP servers. Define your data models with Zod schemas, and mcpresso handles the rest.

## Resources
Resources represent data types your server manages:

```typescript
const userResource = createResource({
  name: "user",
  schema: UserSchema,
  uri_template: "users/{id}",
  methods: {
    get: { handler: async ({ id }) => getUser(id) },
    list: { handler: async () => listUsers() },
    create: { handler: async (data) => createUser(data) },
    update: { handler: async ({ id, ...data }) => updateUser(id, data) },
    delete: { handler: async ({ id }) => deleteUser(id) },
  },
});
```

## Schemas with Zod
Use Zod for validation and type safety:

```typescript
const UserSchema = z.object({
  id: z.string().readonly(),
  name: z.string().min(1, "Required"),
  email: z.string().email(),
  createdAt: z.date().readonly(),
});

type User = z.infer<typeof UserSchema>;
```

## Authentication Modes
- **None**: Public APIs
- **Bearer Token**: Internal services  
- **OAuth 2.1**: Production applications

## Custom Methods
Extend beyond CRUD:

```typescript
search: {
  description: "Search users by name or email",
  inputSchema: z.object({
    query: z.string().describe("Search term"),
    limit: z.number().optional().describe("Maximum results"),
  }),
  handler: async ({ query, limit = 10 }) => searchUsers(query, limit),
}
```

## Quick Start
```bash
npx mcpresso init
cd my-server
npm run dev
```
description:
globs:
alwaysApply: false
---
