# Database Integration

## In-Memory Storage
```typescript
// Simple array storage for development
const items = [];

const itemDB = {
  async create(data) {
    const item = { ...data, id: generateId() };
    items.push(item);
    return item;
  },
  
  async findAll() {
    return [...items];
  },
  
  async findById(id) {
    return items.find(item => item.id === id) || null;
  },
  
  async update(id, updates) {
    const index = items.findIndex(item => item.id === id);
    if (index === -1) return null;
    
    items[index] = { ...items[index], ...updates };
    return items[index];
  },
  
  async delete(id) {
    const index = items.findIndex(item => item.id === id);
    if (index === -1) return null;
    
    return items.splice(index, 1)[0];
  },
};
```

## SQLite
```typescript
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';

const db = await open({
  filename: process.env.DB_PATH || 'data/app.db',
  driver: sqlite3.Database,
});

// Create tables
await db.exec(`
  CREATE TABLE IF NOT EXISTS notes (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    user_id TEXT NOT NULL,
    created_at TEXT NOT NULL,
    updated_at TEXT NOT NULL
  );
`);

// Use in handlers
const result = await db.all('SELECT * FROM notes WHERE user_id = ?', [userId]);
```

## PostgreSQL
```typescript
import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
});

// Use in handlers
const result = await pool.query('SELECT * FROM notes WHERE user_id = $1', [userId]);
```

## Database Operations Pattern
```typescript
const noteDB = {
  async create(note) {
    const result = await db.run(
      'INSERT INTO notes (id, title, content, user_id, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)',
      [note.id, note.title, note.content, note.userId, note.createdAt.toISOString(), note.updatedAt.toISOString()]
    );
    return note;
  },
  
  async findByUserId(userId) {
    const rows = await db.all('SELECT * FROM notes WHERE user_id = ? ORDER BY created_at DESC', [userId]);
    return rows.map(row => ({
      ...row,
      createdAt: new Date(row.created_at),
      updatedAt: new Date(row.updated_at),
    }));
  },
  
  async update(id, updates) {
    const setClause = Object.keys(updates)
      .map(key => `${key.replace(/([A-Z])/g, '_$1').toLowerCase()} = ?`)
      .join(', ');
    
    const values = Object.values(updates);
    await db.run(`UPDATE notes SET ${setClause} WHERE id = ?`, [...values, id]);
    
    return await this.findById(id);
  },
};
```
description:
globs:
alwaysApply: false
---
